\documentclass[12pt]{beamer}
\usepackage{graphicx}
\usepackage{tikz}
\setbeameroption{hide notes}
\setbeamertemplate{note page}[plain]
\usepackage{listings}

\input{../header.tex}

%------------------------------------------------
% end of header
%------------------------------------------------

\title{Getting started with ggplot2}
\subtitle{STAT 133}
\author{\href{http://www.gastonsanchez.com}{Gaston Sanchez}}
\institute{\href{https://github.com/ucb-stat133/stat133-fall-2016}{\tt \scriptsize \color{foreground} github.com/ucb-stat133/stat133-fall-2016}}
\date{}


\begin{document}
<<setup, include=FALSE>>=
# smaller font size for chunks
opts_chunk$set(size = 'footnotesize')
#thm <- knit_theme$get("bclear")
#knit_theme$set(thm)
options(width=78)
@

{
  \setbeamertemplate{footline}{} % no page number here
  \frame{
    \titlepage
  } 
}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{\hilit{ggplot2}}
\end{center}
\end{frame}

<<load_ggplot2, echo=FALSE, message=FALSE>>=
library(ggplot2)
@

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Resources for \code{"ggplot2"}}

\bbi
  \item Documentation: \url{http://docs.ggplot2.org/} 
  \item Book: \textbf{ggplot2: Elegant Graphics for Data Analysis} (by Hadley Wickham)
  \item Book: \textbf{R Graphics Cookbook} (by Winston Chang)
  \item RStudio ggplot2 cheat sheet \\
  {\tiny \url{https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf}}
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{package \code{"ggplot2"}}
<<install_ggplot2, eval=FALSE>>=
# remember to install ggplot2 
# (just once)
install.packages("ggplot2")


# load ggplot2
library(ggplot2)


# see basic documentation
?ggplot
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{ggplot2 book}
\begin{center}
\ig[width=4.5cm]{images/ggplot2.png}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{R Graphics Cookbook}
\begin{center}
\ig[width=5cm]{images/graphics_cookbook.jpg}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
<<size='scriptsize', fig.width=5.5, fig.height=4, out.width='.9\\linewidth', out.height='.65\\linewidth', fig.align='center', echo = FALSE>>=
mt <- mtcars
mt$cyl <- factor(mtcars$cyl)
ggplot(data = mt, 
       aes(x = mpg, y = hp, color = cyl)) +
  geom_point() + 
  ggtitle("Miles per gallon -vs- Horsepower")
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
<<size='scriptsize', fig.width=5.5, fig.height=4, out.width='.9\\linewidth', out.height='.65\\linewidth', fig.align='center', echo = FALSE>>=
with(mt, 
     plot(mpg, hp, col = cyl, pch = 19,
          main = "Miles per gallon -vs- Horsepower"))
legend('topright', legend = levels(mt$cyl), col = c('black', 'red', 'green3'), pch = 19)
@
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{About \code{"ggplot2"}}

\bi
  \item \code{"ggplot2"} (by Hadley Wickham) is an R package for producing statistical graphics
  \item It provides a framework based on Leland Wilkinson's \textbf{Grammar of Graphics}
  \item \code{"ggplot2"} provides beautiful plots while taking care of fiddly details like legends, axes, colors, etc.
  \item \code{"ggplot2"} is built on the R graphics package \code{"grid"}
  \item Underlying philosophy is to describe a wide range of graphics with a compact syntax and independent components
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{The Grammar of Graphics}
\begin{center}
\ig[width=4.5cm]{images/grammar_graphics.jpg}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{About the Grammar of Graphics}

\bbi
  \item \textit{The Grammar of Graphics} is Wilkinson's attempt to define a theoretical framework for graphics
  \item \textbf{Grammar}: Formal system of rules for generating graphics
  \bi
    \item Some rules are mathematic
    \item Some rules are aesthetic
  \ei
\ei

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{About the Grammar of Graphics}

\bb{3 Stages of Graphic Creation}
\bbi
  \item \textbf{Specification}: link data to graphic objects
  \item \textbf{Assembly}: put everything together
  \item \textbf{Display}: render of a graphic
\ei
\eb

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{About the Grammar of Graphics}

\bb{Specification}
Link data to graphic objects
\bbi
  \item Data
  \item Transformation of variables (e.g. aggregation)
  \item Scale transformations (e.g. log)
  \item Coordinate system (e.g. cartesian)
  \item Graphic Elements (e.g. points, lines)
  \item Guides (e.g. labels, legends)
\ei
\eb

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{R package \code{"ggplot2"}}

About \code{"ggplot2"}
\bbi
  \item Default appearance of plots carefully chosen
  \item Designed with visual perception in mind
  \item Inclusion of some components, like legends, are automated
  \item Great flexibility for annotating, editing, and embedding output
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Base graphics -vs- \code{"ggplot2"}}

\begin{columns}[t]
\begin{column}{0.4\textwidth}
\centerline{base graphics}
<<echo = FALSE, fig.width=4, fig.height=4, out.width='1.05\\linewidth', out.height='1.05\\linewidth', fig.align='center'>>=
op <- par(mar = c(5, 4, 1, 1))
with(mtcars, plot(mpg, hp))
par(op)
@
\end{column}

\begin{column}{0.5\textwidth}
\centerline{ggplot2}
<<echo = FALSE, fig.width=3.5, fig.height=3.5, out.width='.85\\linewidth', out.height='.8\\linewidth', fig.align='center'>>=
ggplot(mtcars, aes(mpg, hp)) + 
  geom_point()
@
\end{column}
\end{columns}

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{About \code{"ggplot2"}}

\bbi
  \item \code{"ggplot2"} is the name of the package
  \item The \code{gg} in \code{"ggplot2"} stands for \textit{Grammar of Graphics}
  \item Inspired in the \textbf{Grammar of Graphics} by Lee Wilkinson
  \item \code{"ggplot"} is the class of objects (plots)
  \item \code{ggplot()} is the main function in \code{"ggplot2"}
\ei

\end{frame}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{\hilit{What is a Statistical Graphic?}}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Some Data set}
\code{mtcars}
<<echo=FALSE>>=
print(mtcars[1:10, c('mpg', 'hp', 'cyl')], print.gap = 2)
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{What is a statistical graphic?}
<<size='scriptsize', fig.width=6, fig.height=4, out.width='.95\\linewidth', out.height='.65\\linewidth', fig.align='center', echo = FALSE>>=
mt <- mtcars
mt$cyl <- factor(mtcars$cyl)
ggplot(data = mt, 
       aes(x = mpg, y = hp)) +
  geom_point(aes(color = cyl)) + 
  geom_smooth(method = 'lm') +
  ggtitle("Miles per gallon -vs- Horsepower")
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{What is a statistical graphic?}

Elements to draw the chart ``manually'' 
\pause

\bbi
  \item coordinate system
  \item x and y axis (intervals)
  \item axis tick marks
  \item axis labels, and title
  \item points (with colors)
  \item regression line (and ribbon)
  \item legend
\ei

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{What is a statistical graphic?}

\bb{Simply put, a statistical graphic is:}
\bi
  \item A mapping from data to aesthetic attributes (color, shape, size) of geometric objects (points, lines, bars)
  \item A plot may also contain statistical transformations of the data
  \item A plot is drawn on a specific coordinate system
  \item Sometimes faceting can be used to get the same plot for different subsets of the dataset
\ei
\eb

\end{frame}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{\hilit{Starting with \code{"ggplot2"}}}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{\code{starwarstoy.csv}}
<<echo=FALSE, size='scriptsize'>>=
starwars <- read.csv('starwarstoy.csv')

starwars
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot}
<<sw_scatterplot, size='scriptsize', fig.width=4.5, fig.height=3, out.width='.85\\linewidth', out.height='.6\\linewidth', fig.align='center', echo=FALSE>>=
ggplot(data = starwars) +
  geom_point(aes(x = height, y = weight, color = jedi))
@
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Main steps in creating ggplot graphics}
\begin{center}
\ig[width=8cm]{images/ggplot_steps.pdf}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Building a scatterplot}

User specifications
\bi
  \item Dataset: \code{starwars} 
  \item Variables: \code{height, weight, jedi}
  \item Geoms: points
  \item Aesthetics (attributes):
  \bi
    \item \textbf{x}: \code{height}
    \item \textbf{y}: \code{weight}
    \item \textbf{color}: \code{jedi}
  \ei
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{"ggplot2"}}
<<sw_scatterplot, eval = FALSE>>=
@

\pause
\bi
  \item {\hilit \code{ggplot()}} initializes a \code{"ggplot"} object
  \item specify the dataset with {\mdlit \code{data}}
  \item type of geometric object: {\hilit \code{geom\_point()}}
  \item mapping aesthetic attributes to variables with {\hilit \code{aes()}}
  \bi
    \item x-position: \code{height}
    \item y-position: \code{weight}
    \item color: \code{jedi}
  \ei
\ei
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{"ggplot2"}}
<<sw_scatterplot, size='scriptsize', fig.width=4.5, fig.height=3, out.width='.8\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{"ggplot2"}}

Automated things in \code{"ggplot2"}
\bi
  \item Axis labels
  \item Legends (position, labels, symbols)
  \item Choose of colors for points
  \item Background color (e.g. gray)
  \item Grid lines (major and minor)
  \item Axis tick marks
\ei

{\lit \small you can always change the automated elements}

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{\code{"ggplot2"} graphics}

\bb{Philosophy of \code{"ggplot2"}}
A graphic is a {\hilit \textbf{mapping}} from \textbf{data} to \textbf{aesthetic attributes} (color, shape, size) of \textbf{geometric objects} (points, lines, bars)
\eb

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{"ggplot2"}}
<<sw_scatterplot, size='scriptsize', fig.width=4.5, fig.height=3, out.width='.8\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Mapping}
\begin{center}
\ig[width=11cm]{images/ggplot_mapping.pdf}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{\code{"ggplot2"} graphics}

\bb{Philosophy of \code{"ggplot2"}}
A graphic is a {\hilit \textbf{mapping}} from \textbf{data} to \textbf{aesthetic attributes} (color, shape, size) of \textbf{geometric objects} (points, lines, bars)
\eb

\bi
  \item \code{ggplot(data, ...)}
  \item \code{aes()}
  \item \code{geom\_objects()}
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{"ggplot2"}}

How does \code{"ggplot2"} work?
\bi
  \item plots are created piece-by-piece
  \item plot components added with {\hilit \textbf{+}} operator
  \item aesthetic attributes mapped to data values
  \item computation of scales for aesthetic attributes
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{How does it work?}
Usually, we specify the data and variables inside the function {\hilit \code{ggplot()}} 
<<eval=FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = hp))
@
Note the use of the internal function {\hilit \code{aes()}} to \textit{map} \code{x} to \code{mpg}, and \code{y} to \code{hp}.

\bigskip
Then we \textbf{add a layer} of geometric objects: points in this case
<<eval=FALSE>>=
+ geom_point()
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Some alternative options}
<<eval=FALSE>>=
# option A
ggplot(data = starwars,
       aes(x = height, y = weight, color = jedi)) +
  geom_point()
@

\pause
<<eval=FALSE>>=
# option B
ggplot(data = starwars) +
  geom_point(aes(x = height, y = weight, color = jedi))
@

\pause
<<eval=FALSE>>=
# option C
ggplot() +
  geom_point(data = starwars,
             aes(x = height, y = weight, color = jedi))
@
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Main inquiries}

\bb{Always ask yourself ...}
\bbi
  \item What is the \textbf{data} set of interest?
  \item What \textbf{variables} will be used to make the plot?
  \item What \textbf{graphics shapes} will be used to display?
  \item What \textbf{features} of the shapes will be used to represent the data values?
\ei
\eb

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{\code{"ggplot2"} basics}

\bbi
  \item The data must be in a \code{data.frame}
  \item Variables are mapped to aesthetic attributes
  \item Aesthetic attributes belong to geometric objects \textbf{geoms} (points, lines, polygons)
\ei

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Basic Terminology}

\bbi
  \item \textbf{ggplot()} - The main function where you specify the dataset and variables to plot
  \item \textbf{geoms} - geometric objetcs
  \bi
    \item \code{geom\_point()}, \code{geom\_bar()}, \code{geom\_line(), \code{geom\_density()}}
  \ei
  \item \textbf{aes} - aesthetics (i.e. attributes)
  \bi
    \item shape, color, fill, linetype
  \ei
\ei

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Warning}

\code{"ggplot2"} comes with the function {\hilit \code{qplot()}} (i.e. \textit{quick plot}). Avoid using it! 

\bigskip
As Karthik Ram says: ``you'll end up unlearning and relearning a good bit''
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{"ggplot2"}}

Terminology
\bi
  \item aesthetic mappings
  \item geometric objects
  \item statistical transformations
  \item scales
  \item non-data elements (themes \& elements)
  \item facets
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Considerations}

Specifying graphical elements from 3 sources:
\bbi
  \item The data values (represented by the geometric objects)
  \item The scales and coordinate system (axes, legends)
  \item Plot annotations (background, title, grid lines)
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Scatterplot with \code{geom\_point}}
<<size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point()
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Another \code{geom}}
<<size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_line()
@
\end{frame}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{{\hilit Mapping Attributes \\ 
-vs- \\
Setting Attributes}}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Increase size of points}
<<xyplot_mtcars2, size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3)
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{How does it work?}
To increase the size of points, we \textbf{set} the aesthetic \code{size} to a constant value of 3 (inside the \textit{geoms} function):
<<eval=FALSE>>=
+ geom_point(size = 3)
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Adding color}
<<xyplot_mtcars3, size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3, color = "tomato")
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Adding color}
<<size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3, color = "#259ff8")
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Changing points shape}
<<xyplot_mtcars4, size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
# 'shape' accepts 'pch' values
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3, color = "tomato", shape = 15)
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Setting and Mapping}

Aesthetic attributes can be either \textbf{mapped} ---via \code{aes()}--- or \textbf{set}

<<eval = FALSE>>=
# mapping aesthetic color
ggplot(mtcars, aes(x = mpg, y = hp)) + 
  geom_point(aes(color = cyl))

# setting aesthetic color
ggplot(mtcars, aes(x = mpg, y = hp)) + 
  geom_point(color = "blue")
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Geom text, and mapping labels}
<<xyplot_mtcars9, size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_text(aes(label = gear))
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Changing axis labels and title}
<<xyplot_mtcars5, size='scriptsize', fig.width=5, fig.height=4, out.width='.6\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3, color = "tomato") +
  xlab("miles per gallon") +
  ylab("horse power") +
  ggtitle("Scatter plot with ggplot2")
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Changing background theme}
<<xyplot_mtcars6, size='scriptsize', fig.width=5, fig.height=4, out.width='.6\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3, color = "tomato") +
  xlab("miles per gallon") +
  ylab("horse power") +
  ggtitle("Scatter plot with ggplot2") + 
  theme_bw()
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: Replicate this figure}
<<your_xyplot1, size='scriptsize', fig.width=6, fig.height=4, out.width='.8\\linewidth', out.height='.6\\linewidth', fig.align='center', echo = FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(size = disp), 
             color = "#ff6666", shape = 17) +
  xlab("miles per gallon") +
  ylab("horse power")
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: Replicate this figure}
\bi
  \item Specify a color in hex notation
  \item Change the shape of the point symbol
  \item Map \code{disp} to attribute size of points
  \item Add axis labels
\ei
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn}
<<your_xyplot1, eval=FALSE>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{More geoms}
<<xyplot_mtcars10, size='scriptsize', fig.width=5, fig.height=4, out.width='.7\\linewidth', out.height='.6\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point() + 
  geom_smooth(method = "lm")
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{More geoms}
We can map variable to a color aesthetic. Here we map \code{color} to \code{cyl} (cylinders)
<<xyplot_mtcars11, size='scriptsize', fig.width=5, fig.height=4, out.width='.6\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(color = cyl))
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{More geoms}
If the variable that maps to color is a factor, then the color scale will change
<<xyplot_mtcars12, size='scriptsize', fig.width=6.5, fig.height=4, out.width='.75\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(color = as.factor(cyl)))
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: Replicate this figure}
<<your_xyplot2, size='scriptsize', fig.width=6, fig.height=4, out.width='.85\\linewidth', out.height='.6\\linewidth', fig.align='center', echo = FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = disp)) +
  geom_point(aes(size = hp, color = factor(am)),
             alpha = 0.7) +
  xlab("miles per gallon") +
  ylab("displacement") +
  ggtitle("Scatter plot with ggplot2") 
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: example 2}
\bi
  \item Map \code{hp} to attribute size of points
  \item Map \code{am} (as factor) to attribute color points
  \item Add an alpha transparency of 0.7
  \item Change the shape of the point symbol
  \item Add axis labels
  \item Add a title
\ei
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: example 2}
<<your_xyplot2, eval= FALSE>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Histogram}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg)) +
  geom_histogram(binwidth = 2)
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Boxplots}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_boxplot()
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Density Curves}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg)) +
  geom_density()
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Density Curves}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg)) +
  geom_density(fill = "#c6b7f5")
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Density Curves}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg)) +
  geom_density(fill = "#c6b7f5", alpha = 0.4)
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Density Curves}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg)) +
  geom_line(stat = 'density', col = "#a868c0", size = 2)
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Density Curves}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg)) +
  geom_density(fill = '#a868c0') + 
  geom_line(stat = 'density', col = "#a868c0", size = 2)
@

\end{frame}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{\hilit{\code{ggplot} objects}}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Plot objects}
You can assign a plot to a new object (this won't plot anything):
<<xyplot_mtcars7>>=
mpg_hp <- ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(size = 3, color = "tomato") 
@

To show the actual plot associated to the object \code{mpg\_hp} use the function \code{print()}
<<eval = FALSE>>=
print(mpg_hp)
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{\code{"ggplot2"} objects}

\bb{working with ggplot objects, we can ...}
\bi
  \item define a basic plot, to which we can add or change layers without typing everything again
  \item render it on screen with \code{print()}
  \item describe its structure with \code{summary()}
  \item render it to disk with \code{ggsave()}
  \item save a cached copy to disk with \code{save()}
\ei
\eb

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{}
Adding a title and axis labels to a ggplot2 object:
<<xyplot_mtcars8, size='scriptsize', fig.width=5, fig.height=4, out.width='.6\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
mpg_hp + ggtitle("Scatter plot with ggplot2") +
  xlab("miles per gallon") + ylab("horse power") 
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: example 3}
Create the following ggplot object:
<<>>=
# ggplot object
obj <- ggplot(data = mtcars, 
         aes(x = mpg, y = hp, label = rownames(mtcars)))
@

Add more layers to the object \code"{"obj"} in order to replicate the figure in the following slide:
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: example 3}
<<your_xyplot3, size='scriptsize', fig.width=8, fig.height=6, out.width='.8\\linewidth', out.height='.6\\linewidth', fig.align='center', echo = FALSE>>=
obj + 
  geom_text(aes(color = factor(am))) + 
  ggtitle("Scatter plot") +
  xlab("miles per gallon") + 
  ylab("horse power") 
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Your turn: example 3}
<<your_xyplot3, eval = FALSE>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{\hilit{Scales}}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Scales}

\bi
  \item The \textbf{scales} component encompases the ideas of both axes and legends on plots, e.g.:
  \item Axes can be continuous or discrete
  \item Legends involve colors, symbol shapes, size, etc
  \bi
    \item \code{scale\_x\_continuous}
    \item \code{scale\_y\_continuous}
    \item \code{scale\_color\_manual}
  \ei
  \item \textbf{scales} will often automatically generate appropriate scales for plots
  \item Explicitly adding a scale component overrides the default scale
\ei

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Continuous axis scales}
Use \code{scale\_x\_continuous()} to modify the default values in the $x$ axis
<<scale_x, eval=FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(color = factor(am))) +
  scale_x_continuous(name = "miles per gallon",
                     limits = c(10, 40),
                     breaks = c(10, 20, 30, 40))
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Continuous axis scales}
<<scale_x, fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=FALSE>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Continuous axis scales}
Use \code{scale\_y\_continuous()} to modify the default values in the $y$ axis
<<scale_y, eval=FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(color = factor(am))) +
  scale_x_continuous(name = "miles per gallon",
                     limits = c(10, 40),
                     breaks = c(10, 20, 30, 40)) +
  scale_y_continuous(name = "horsepower",
                     limits = c(50, 350),
                     breaks = seq(50, 350, by = 50))
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Continuous axis scales}
<<scale_y, fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=FALSE>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Example: color scale}

Use \code{scale\_color\_manual()} to modify the colors associated to a factor
<<color_manual, eval = FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(color = factor(am))) +
  scale_color_manual(values = c("orange", "purple"))
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Example: color scale}

<<color_manual, fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=FALSE>>=
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Example: modifying legend}

Modifying legends depends on the type of scales (e.g. color, shapes, size, etc)
<<legend_guide, eval = FALSE>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(aes(color = factor(am))) +
  scale_color_manual(values = c("orange", "purple"),
                     name = "transmission",
                     labels = c('no', 'yes'))
@
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Example: modifying legend}

<<legend_guide, fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center', echo=FALSE>>=
@
\end{frame}

%------------------------------------------------

\begin{frame}
\begin{center}
\Huge{\hilit{Faceting}}
\end{center}
\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Faceting with \code{facet\_wrap()}}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(color = "#3088f0") +
  facet_wrap(~ cyl)
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Faceting with \code{facet\_grid()}}

<<size='scriptsize', fig.width=6, fig.height=4, out.width='.8\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(color = "#3088f0") +
  facet_grid(cyl ~ .)
@

\end{frame}

%------------------------------------------------

\begin{frame}[fragile]
\frametitle{Faceting with \code{facet\_grid()}}

<<size='scriptsize', fig.width=7, fig.height=4, out.width='.9\\linewidth', out.height='.5\\linewidth', fig.align='center'>>=
ggplot(data = mtcars, aes(x = mpg, y = hp)) +
  geom_point(color = "#3088f0") +
  facet_grid(. ~ cyl)
@

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Layered Grammar}

About \code{"ggplot2"}
\bi
  \item Key concept: \textbf{layer} (layered grammar of graphics)
  \item Designed to work in a layered fashion
  \item Starting with a layer showing the data
  \item Then adding layers of annotations and statistical transformations
  \item Core idea: independents components combined togehter
\ei

\end{frame}

%------------------------------------------------

\begin{frame}
\frametitle{Some Concepts}

\bi
  \item the \textbf{data} to be visualized
  \item a set of \textbf{aesthetic mappings} describing how varibales are mapped to aesthetic attributes
  \item geometric objects, \textbf{geoms}, representing what you  see on the plot (points, lines, etc)
  \item statistical transformations, \textbf{stats}, summarizing data in various ways
  \item \textbf{scales} that map values in the data space to values in an aesthetic space
  \item a coordinate system, \textbf{coord}, describing how data coordinates are mapped to the plane of the graphic
  \item a \textbf{faceting} specification describing how to break up the data into subsets and to displays those subsets
\ei

\end{frame}


\end{document}